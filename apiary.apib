FORMAT: 1A
HOST: http://private-8b88f1-etb.apiary-mock.com/

# ETB

This documents the API specs for the ETB project

## Users Microservice [/users]

### Sign up a new user [POST /register]

+ Response 200 (application/json)

        {
            "status": "success"
        }

+ Request (application/json)
    + Body

            {
              "phone": "092039029302",
              "email": "johndoe@example.com",
              "password": "secret"
            }

### Sign up a new user pase 2 [POST users/register/phase2]
+ Request
    + Headers
        api_token: 9EYobkJgowPE70SuELuPWrpiGLhdo14ZVCvzRy5UiJmO97kP4UILpFefw030
    
+ Response 200 (application/json)

        {
    "status": "failed",
    "message": "Client with externalId `5M8PiG1RPZ` already exists"
        }
+ Response 200 (application/json)

        {
       "status": "success",
    "data": {
        "id": 1,
        "account_id": "gRWxtE0XJA",
        "email": "johndoe@gmail.com",
        "phone": "+2478173018280",
        "bvn": null,
        "first_name": "yj",
        "middle_name": "jhjgk",
        "last_name": "ftyq",
        "date_of_birth": "12/01/1992",
        "pin": null,
        "gender": "male",
        "status": "active",
        "referral_code": "oZ1XOb",
        "created_at": "2018-05-23 13:50:03",
        "updated_at": "2018-05-31 18:42:19",
        "resource_id": 101,
        "office_id": 1,
        "client_id": 101,
        "savings_id": 38
    },
    "message": "user registeration completed successfully"
        }

+ Request (application/json)
    + Body

            {
              "phone": "092039029302",
              "email": "johndoe@example.com",
              "password": "secret"
            }

### Login to your account [POST /login]
+ Response 200 (application/json)

        {
            "status": "success",
             "api_key": "lnB0uw6nW8VwdR3JkU6zGbTKPrYBbJdDhRP0kSTU80jlgv1RDTGdzZyKxaDq"
        }
        
+ Response 401 (application/json)

        {
            "status": "failed",
             "message": "user does not exist"
        }
        
+ Response 401 (application/json)

        {
            "status": "failed",
             "message": "incorrect password"
        }

+ Request (application/json)
    + Body

            {
              "firstName": "john",
              "lastName": "doe",
              "middleName": "sandstorm",
              "dateOfBirth": "12/01/1992",
              "gender": "male"
            }
            
### Update a user [PUT /users/profile]
+ Request
    + Headers
        api_token: 9EYobkJgowPE70SuELuPWrpiGLhdo14ZVCvzRy5UiJmO97kP4UILpFefw030
    
+ Response 200 (application/json)

        {
       "status": "success",
    "data": {
        "id": 1,
        "account_id": "gRWxtE0XJA",
        "email": "johndoe@gmail.com",
        "phone": "+2478173018280",
        "bvn": null,
        "first_name": "yj",
        "middle_name": "jhjgk",
        "last_name": "ftyq",
        "date_of_birth": "12/01/1992",
        "pin": null,
        "gender": "male",
        "status": "active",
        "referral_code": "oZ1XOb",
        "created_at": "2018-05-23 13:50:03",
        "updated_at": "2018-05-31 18:42:19",
        "resource_id": 101,
        "office_id": 1,
        "client_id": 101,
        "savings_id": 38
    },
    "message": "user registeration completed successfully"
        }
        
        + Request (application/json)
    + Body

            {
              "firstName": "john",
              "lastName": "doe",
              "middleName": "sandstorm",
              "dateOfBirth": "12/01/1992",
              "gender": "male"
            }

### Forgot password [GET /forgotpassword]

### Set a new password [GET /setnewpassword]

### Get a user [GET /users/:userId]

### Report Issue [GET /users/:userId/reportIssue]

### Set Pin [GET /users/:userId/setPin]

### Validate Pin [GET /users/:userId/validatePin]

### Verify BVN [GET /users/:userId/verifyBvn]

### Complete BVN Verification [GET /users/:userId/completeVerifyBvn]

## Loans Microservice [/loans]

### Get loan repayments [GET /loanrepayments]

### Make loan repayment [POST /loanrepayments/:loanId]

### Create loan [POST /loans]

### Get loan decision [GET /loans/:loanId/decision]

### Approve loan [POST /loans/:loanId/approve]

### Get loan [PUT /loans/:loanId]

### Get loans [GET /loans]

## Savings Microservice [/savings]

### Create savings [POST /savings]

### Get saving [GET /savings/:savingsId]

### Withdraw savings [POST /savings/:savingsId/withdraw]

### Get savings transactions [GET /savingstransactions]

### Fund savings [POST /savings/:savingsId/fund]

### Create fixed savings [POST /fixedsavings]

### Get fixed saving [GET /fixedsavings/:savingsId]

### Withdraw fixed savings [POST /fixedsavings/:savingsId/withdraw]

### Get fixedsavings transactions [GET /fixedsavingstransactions]

### Fund fixed savings [POST /fixedsavings/:savingsId/fund]

## Send Money Microservice [/sendmoney]

### Get beneficiaries [GET /beneficiaries]

### Save beneficiaries [POST /beneficiaries]

### Delete beneficiary [DELETE /beneficiaries/:beneficiaryId]

### Send Money [POST /sendmoney]

### Get send money history [GET /sendmoneytransactions]

## Bills Microservice [/bills]

### Get bill categories [GET /billcategories]

### Get bills in a categories [GET /billcategories/:categoryId]

### Get bill transactions [GET /billtransactions]

### Get bill [GET /bill/:billId]

### Get purchase bill [POST /bill/:billId/purchase]

### Create recurring bill purchase [POST /bill/:billId/recurringpurchase]

### Get bill fee [POST /bill/:billId/fee]

### Save bill [POST /savedbills]

## Payment Methods Microservice [/paymentmethods]

### Create payment methods [POST /paymentmethods]

### Get payment method [GET /paymentmethods/:paymentMethodId]

### Get payment methods [GET /paymentmethods]

### Delete payment method [DELETE /paymentmethods/:paymentMethodId]

## Notifications [/notifications]

### Get notifications [GET /notifications]

### Create notification [POST /notifications]

### Get notification [GET /notifications/:notificationId]